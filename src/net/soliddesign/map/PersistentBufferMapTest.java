package net.soliddesign.map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Test;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import net.soliddesign.map.PersistentBufferMap.GsonMap;
import net.soliddesign.map.PersistentBufferMap.StringMap;

public class PersistentBufferMapTest {
	private static final String LOREM_IPSUM = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ultricies elementum lacinia. Nam euismod viverra ultrices. Sed fringilla, ipsum a volutpat aliquam, tortor leo tristique diam, in consequat purus neque vitae enim. Mauris et efficitur lorem. Duis in fringilla dui. In lacinia dictum nulla pharetra efficitur. Suspendisse ac lacus nulla. Aenean egestas, orci ac dictum semper, sapien ligula tincidunt tortor, sit amet ullamcorper leo orci eu libero. Quisque in aliquet diam. Praesent aliquam nullam.";

	@Test
	public void simple() throws Exception {
		File f = File.createTempFile("test.", ".mapdb");
		try (StringMap map = StringMap.create(new PersistentBufferMap(f, 3))) {
			map.put("one", "red");
			map.put("two", "blue");
			map.put("three", "green");
			map.put("four", "mellon");

			// verify content
			assertEquals("red", map.get("one"));
			assertEquals("blue", map.get("two"));
			assertEquals("green", map.get("three"));
			assertEquals("mellon", map.get("four"));
			assertNull(map.get("five"));

			// verify key and value collections that are generated by
			// map.stream()
			List<String> keys = Arrays.asList("one", "two", "three", "four");
			List<String> values = Arrays.asList("red", "blue", "green", "mellon");
			assertEquals(new HashSet<String>(keys), map.keySet());
			assertEquals(new HashSet<String>(values), map.values());

			// verify hashcode and equals
			HashMap<String, String> m = new HashMap<String, String>();
			for (int i = 0; i < keys.size(); i++)
				m.put(keys.get(i), values.get(i));
			assertEquals(m.hashCode(), map.hashCode());
			assertEquals(m, map);
			m.put("zero", "nothing");
			Assert.assertNotEquals(m.hashCode(), map.hashCode());
			Assert.assertNotEquals(m, map);

			// test giant keys
			map.put(LOREM_IPSUM, "Lorem Ipsum");
			assertEquals("Lorem Ipsum", map.get(LOREM_IPSUM));
			assertNull(map.get(LOREM_IPSUM + "a"));
		}
		try (StringMap map = StringMap.create(new PersistentBufferMap(f, -1))) {
			assertEquals("red", map.get("one"));
			assertEquals("blue", map.get("two"));
			assertEquals("green", map.get("three"));
			assertEquals("mellon", map.remove("four"));
			assertNull(map.get("four"));

			// test giant keys
			assertEquals("Lorem Ipsum", map.get(LOREM_IPSUM));
			assertNull(map.get(LOREM_IPSUM + "a"));
			assertEquals("Lorem Ipsum", map.remove(LOREM_IPSUM));
			assertNull(map.get(LOREM_IPSUM));
		}
		try (StringMap map = StringMap.create(new PersistentBufferMap(f, -1))) {
			assertNull(map.get("four"));
			// System.err.println(new Gson().toJson(map));
			assertEquals(new Gson().fromJson("{'one':'red','two':'blue','three':'green'}",
					new TypeToken<Map<String, String>>() {
					}.getType()), map);
		} finally {
			f.delete();
		}

	}

	static class Person {
		Person() {
		}

		Person(String n, int a) {
			name = n;
			age = a;
		}

		String name;
		int age;
	}

	@Test
	public void gsonObjects() throws Exception {
		File f = File.createTempFile("test.", ".mapdb");
		try (GsonMap<String, Person> map = GsonMap.create(new PersistentBufferMap(f, 5), String.class, Person.class)) {
			map.put("Joe", new Person("Joseph", 44));
		}
		try (GsonMap<String, Person> map = GsonMap.create(new PersistentBufferMap(f, -1), String.class, Person.class)) {
			assertEquals(44, map.get("Joe").age);
			assertEquals("Joseph", map.get("Joe").name);
		}
	}

	@Test
	public void lotsaObjects() throws Exception {
		File f = File.createTempFile("test.", ".mapdb");
		int count = (int) Files.lines(Paths.get("/usr/share/dict/words")).count();
		try (GsonMap<String, Person> map = GsonMap.create(new PersistentBufferMap(f, count), String.class,
				Person.class)) {
			Files.lines(Paths.get("/usr/share/dict/words")).forEach(w -> map.put(w, new Person(w, w.length())));
		}
		try (GsonMap<String, Person> map = GsonMap.create(new PersistentBufferMap(f, -1), String.class, Person.class)) {
			assertEquals(3, map.get("cat").age);
			assertEquals(5, map.get("money").age);
		}
	}
}
